#PlusMinus from Hoenicke, J., Majumdar, R., Podelski, A.: Thread modularity at many levels: a pearl in compositional verification.
#In: Proceedings of the 44th ACM SIGPLAN Symposium on Principles of Programming Languages. p. 473–485. POPL’17,
#Association for Computing Machinery, New York, NY, USA (2017). https: //doi.org/10.1145/3009837.3009893

sort node

mutable constant x : int 
mutable relation loc0(node)
mutable relation loc1(node)

init x = 0 
init loc0(N)
init ~loc1(N)

transition step01(n: node)
	modifies x,loc0,loc1
  & loc0(n)
	& new(x) = x + 1  
  & new(loc1(N)) = (loc1(N) | N=n)
  & new(loc0(N)) = (loc0(N) & N != n)

transition step10(n: node)
	modifies x,loc0,loc1
  & loc1(n)
	& new(x) = x - 1  
  & new(loc0(N)) = (loc0(N) | N=n) 
  & new(loc1(N)) = (loc1(N) & N != n)

immutable constant node_sk : node
safety ~(loc1(node_sk) & x <= 0) #original property has x=0 but this is stronger

cutoff sort node

cutoff update x(z: node) : int =
  if loc1(z) then x - 1 else x
invariant loc0(N) | loc1(N)
invariant ~ (loc0(N) & loc1(N))

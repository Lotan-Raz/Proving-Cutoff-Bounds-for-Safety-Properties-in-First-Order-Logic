#LockServer from Padon, O., McMillan, K.L., Panda, A., Sagiv, M., Shoham, S.: 
#Ivy: Safety verification by interactive generalization. In: PLDI ’16: Proceedings of the 37th ACM 
#SIGPLAN Conference on Programming Language Design and Implementation. pp. 614–630 (Jun 2016). https://doi.org/10.1145/2908080.2908118
#Showing cutoff for sort node

sort node

mutable relation lock_msg(node)
mutable relation grant_msg(node)
mutable relation unlock_msg(node)
mutable relation holds_lock(node)
mutable constant server_holds_lock : bool

init !lock_msg(N)
init !grant_msg(N)
init !unlock_msg(N)
init !holds_lock(N)
init server_holds_lock = true

transition send_lock(n: node)
  modifies lock_msg
  new(lock_msg(N)) <-> lock_msg(N) | N = n

transition recv_lock(n: node)
  modifies lock_msg, server_holds_lock, grant_msg
  server_holds_lock &
  lock_msg(n) &
  !new(server_holds_lock) &
  (new(lock_msg(N)) <-> lock_msg(N) & N != n) &
  (new(grant_msg(N)) <-> grant_msg(N) | N = n)

transition recv_grant(n: node)
  modifies grant_msg, holds_lock
  grant_msg(n) &
  (new(grant_msg(N)) <-> grant_msg(N) & N != n) &
  (new(holds_lock(N)) <-> holds_lock(N) | N = n)

transition unlock(n: node)
  modifies holds_lock, unlock_msg
  holds_lock(n) &
  (new(holds_lock(N)) <-> holds_lock(N) & N != n) &
  (new(unlock_msg(N)) <-> unlock_msg(N) | N = n)

transition recv_unlock(n: node)
  modifies unlock_msg, server_holds_lock
  unlock_msg(n) &
  (new(unlock_msg(N)) <-> unlock_msg(N) & N != n) &
  new(server_holds_lock)

immutable constant node_sk1 : node
immutable constant node_sk2 : node
safety [mutex] holds_lock(node_sk1) & holds_lock(node_sk2) -> node_sk1 = node_sk2

cutoff sort node

cutoff update server_holds_lock(z : node) : bool =
  if holds_lock(z) | grant_msg(z) | unlock_msg(z) 
  then true 
  else server_holds_lock

invariant holds_lock(N1) & holds_lock(N2) -> N1 = N2
invariant grant_msg(N1) & grant_msg(N2) -> N1 = N2
invariant unlock_msg(N1) & unlock_msg(N2) -> N1 = N2
invariant !(holds_lock(N1) & grant_msg(N2))
invariant !(holds_lock(N1) & unlock_msg(N2))
invariant !(grant_msg(N1) & unlock_msg(N2))
invariant !(grant_msg(N) & server_holds_lock)
invariant !(holds_lock(N) & server_holds_lock)
invariant !(unlock_msg(N) & server_holds_lock)

